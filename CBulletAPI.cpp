b3ConnectSharedMemory
b3ConnectSharedMemory2
///think more about naming. Directly execute commands without transport 
b3ConnectPhysicsDirect
///There are several connection methods, see following header files:
///b3DisconnectSharedMemory will disconnect the client from the server and cleanup memory.
b3DisconnectSharedMemory
///There can only be 1 outstanding command. Check if a command can be send.
b3CanSubmitCommand
///blocking submit command and wait for status
b3SubmitClientCommandAndWaitStatus
///In general it is better to use b3SubmitClientCommandAndWaitStatus. b3SubmitClientCommand is a non-blocking submit
///command, which requires checking for the status manually, using b3ProcessServerStatus. Also, before sending the
///next command, make sure to check if you can send a command using 'b3CanSubmitCommand'.
b3SubmitClientCommand
///non-blocking check status
b3ProcessServerStatus
/// Get the physics server return status type. See EnumSharedMemoryServerStatus in SharedMemoryPublic.h for error codes.
b3GetStatusType
///Plugin system, load and unload a plugin, execute a command
b3CreateCustomCommand
b3CustomCommandLoadPlugin
b3CustomCommandLoadPluginSetPostFix
b3GetStatusPluginUniqueId
b3GetStatusPluginCommandResult
b3CustomCommandUnloadPlugin
b3CustomCommandExecutePluginCommand
b3CustomCommandExecuteAddIntArgument
b3CustomCommandExecuteAddFloatArgument
b3GetStatusBodyIndices
b3GetStatusBodyIndex
b3GetStatusActualState
b3GetStatusActualState2
b3RequestCollisionInfoCommandInit
b3GetStatusAABB
///If you re-connected to an existing server, or server changed otherwise, sync the body info and user constraints etc.
b3InitSyncBodyInfoCommand
b3InitRemoveBodyCommand
///return the total number of bodies in the simulation
b3GetNumBodies
/// return the body unique id, given the index in range [0 , b3GetNumBodies
b3GetBodyUniqueId
///given a body unique id, return the body information. See b3BodyInfo in SharedMemoryPublic.h
b3GetBodyInfo
///give a unique body index 
b3GetNumJoints
///compute the number of degrees of freedom for this body.
	///Return -1 for unsupported spherical joint, -2 for unsupported planar joint.
b3ComputeDofCount
///given a body and joint index, return the joint information. See b3JointInfo in SharedMemoryPublic.h
b3GetJointInfo
///user data handling
b3InitSyncUserDataCommand
b3InitAddUserDataCommand
b3InitRemoveUserDataCommand
b3GetUserData
b3GetUserDataId
b3GetUserDataIdFromStatus
b3GetNumUserData
b3GetUserDataInfo
b3GetDynamicsInfoCommandInit
b3GetDynamicsInfoCommandInit2
///given a body unique id and link index, return the dynamics information. See b3DynamicsInfo in SharedMemoryPublic.h
b3GetDynamicsInfo
b3InitChangeDynamicsInfo
b3InitChangeDynamicsInfo2
b3ChangeDynamicsInfoSetMass
b3ChangeDynamicsInfoSetLocalInertiaDiagonal
b3ChangeDynamicsInfoSetLateralFriction
b3ChangeDynamicsInfoSetSpinningFriction
b3ChangeDynamicsInfoSetRollingFriction
b3ChangeDynamicsInfoSetRestitution
b3ChangeDynamicsInfoSetLinearDamping
b3ChangeDynamicsInfoSetAngularDamping
b3ChangeDynamicsInfoSetContactStiffnessAndDamping
b3ChangeDynamicsInfoSetFrictionAnchor
b3ChangeDynamicsInfoSetCcdSweptSphereRadius
b3ChangeDynamicsInfoSetContactProcessingThreshold
b3ChangeDynamicsInfoSetActivationState
b3InitCreateUserConstraintCommand
b3InitCreateUserConstraintCommand2
///return a unique id for the user constraint, after successful creation, or -1 for an invalid constraint id
b3GetStatusUserConstraintUniqueId
///change parameters of an existing user constraint
b3InitChangeUserConstraintCommand
b3InitChangeUserConstraintSetPivotInB
b3InitChangeUserConstraintSetFrameInB
b3InitChangeUserConstraintSetMaxForce
b3InitChangeUserConstraintSetGearRatio
b3InitChangeUserConstraintSetGearAuxLink
b3InitChangeUserConstraintSetRelativePositionTarget
b3InitChangeUserConstraintSetERP
b3InitRemoveUserConstraintCommand
b3GetNumUserConstraints
b3InitGetUserConstraintStateCommand
b3GetStatusUserConstraintState
b3GetUserConstraintInfo
/// return the user constraint id, given the index in range [0 , b3GetNumUserConstraints
b3GetUserConstraintId
///Request physics debug lines for debug visualization. The flags in debugMode are the same as used in Bullet
	///See btIDebugDraw::DebugDrawModes in Bullet/src/LinearMath/btIDebugDraw.h
b3InitRequestDebugLinesCommand
///Get the pointers to the physics debug line information, after b3InitRequestDebugLinesCommand returns
	///status CMD_DEBUG_LINES_COMPLETED
b3GetDebugLines
///configure the 3D OpenGL debug visualizer 
b3InitConfigureOpenGLVisualizer
b3InitConfigureOpenGLVisualizer2
b3ConfigureOpenGLVisualizerSetVisualizationFlags
b3ConfigureOpenGLVisualizerSetViewMatrix
b3InitRequestOpenGLVisualizerCameraCommand
b3GetStatusOpenGLVisualizerCamera
/// Add/remove user-specific debug lines and debug text messages
b3InitUserDebugDrawAddLine3D
b3InitUserDebugDrawAddText3D
b3UserDebugTextSetOptionFlags
b3UserDebugTextSetOrientation
b3UserDebugItemSetReplaceItemUniqueId
b3UserDebugItemSetParentObject
b3InitUserDebugAddParameter
b3InitUserDebugReadParameter
b3GetStatusDebugParameterValue
b3InitUserDebugDrawRemove
b3InitUserDebugDrawRemoveAll
b3InitDebugDrawingCommand
b3SetDebugObjectColor
b3RemoveDebugObjectColor
///All debug items unique Ids are positive: a negative unique Id means failure.
b3GetDebugItemUniqueId
///request an image from a simulated camera, using a software renderer.
b3InitRequestCameraImage
b3InitRequestCameraImage2
b3RequestCameraImageSetCameraMatrices
b3RequestCameraImageSetPixelResolution
b3RequestCameraImageSetLightDirection
b3RequestCameraImageSetLightColor
b3RequestCameraImageSetLightDistance
b3RequestCameraImageSetLightAmbientCoeff
b3RequestCameraImageSetLightDiffuseCoeff
b3RequestCameraImageSetLightSpecularCoeff
b3RequestCameraImageSetShadow
b3RequestCameraImageSelectRenderer
b3RequestCameraImageSetFlags
b3GetCameraImageData
///set projective texture camera matrices.
b3RequestCameraImageSetProjectiveTextureMatrices
///compute a view matrix, helper function for b3RequestCameraImageSetCameraMatrices
b3ComputeViewMatrixFromPositions
b3ComputeViewMatrixFromYawPitchRoll
b3ComputePositionFromViewMatrix
///compute a projection matrix, helper function for b3RequestCameraImageSetCameraMatrices
b3ComputeProjectionMatrix
b3ComputeProjectionMatrixFOV
/* obsolete, please use b3ComputeViewProjectionMatrices */
b3RequestCameraImageSetViewMatrix
b3RequestCameraImageSetViewMatrix2
b3RequestCameraImageSetProjectionMatrix
b3RequestCameraImageSetFOVProjectionMatrix
///request an contact point information
b3InitRequestContactPointInformation
b3SetContactFilterBodyA
b3SetContactFilterBodyB
b3SetContactFilterLinkA
b3SetContactFilterLinkB
b3GetContactPointInformation
///compute the closest points between two bodies
b3InitClosestDistanceQuery
b3SetClosestDistanceFilterBodyA
b3SetClosestDistanceFilterLinkA
b3SetClosestDistanceFilterBodyB
b3SetClosestDistanceFilterLinkB
b3SetClosestDistanceThreshold
b3SetClosestDistanceFilterCollisionShapeA
b3SetClosestDistanceFilterCollisionShapeB
b3SetClosestDistanceFilterCollisionShapePositionA
b3SetClosestDistanceFilterCollisionShapePositionB
b3SetClosestDistanceFilterCollisionShapeOrientationA
b3SetClosestDistanceFilterCollisionShapeOrientationB
b3GetClosestPointInformation
///get all the bodies that touch a given axis aligned bounding box specified in world space 
b3InitAABBOverlapQuery
b3GetAABBOverlapResults
//request visual shape information
b3InitRequestVisualShapeInformation
b3GetVisualShapeInformation
b3InitRequestCollisionShapeInformation
b3GetCollisionShapeInformation
b3InitLoadTexture
b3GetStatusTextureUniqueId
b3CreateChangeTextureCommandInit
b3InitUpdateVisualShape
b3InitUpdateVisualShape2
b3UpdateVisualShapeTexture
b3UpdateVisualShapeRGBAColor
b3UpdateVisualShapeSpecularColor
b3InitPhysicsParamCommand
b3InitPhysicsParamCommand2
b3PhysicsParamSetGravity
b3PhysicsParamSetTimeStep
b3PhysicsParamSetDefaultContactERP
b3PhysicsParamSetDefaultNonContactERP
b3PhysicsParamSetDefaultFrictionERP
b3PhysicsParamSetDefaultGlobalCFM
b3PhysicsParamSetDefaultFrictionCFM
b3PhysicsParamSetNumSubSteps
b3PhysicsParamSetRealTimeSimulation
b3PhysicsParamSetNumSolverIterations
b3PhysicsParamSetCollisionFilterMode
b3PhysicsParamSetUseSplitImpulse
b3PhysicsParamSetSplitImpulsePenetrationThreshold
b3PhysicsParamSetContactBreakingThreshold
b3PhysicsParamSetMaxNumCommandsPer1ms
b3PhysicsParamSetEnableFileCaching
b3PhysicsParamSetRestitutionVelocityThreshold
b3PhysicsParamSetEnableConeFriction
b3PhysicsParameterSetDeterministicOverlappingPairs
b3PhysicsParameterSetAllowedCcdPenetration
b3PhysicsParameterSetJointFeedbackMode
b3PhysicsParamSetSolverResidualThreshold
b3PhysicsParamSetContactSlop
b3PhysicsParameterSetEnableSAT
b3PhysicsParameterSetConstraintSolverType
b3PhysicsParameterSetMinimumSolverIslandSize
b3InitRequestPhysicsParamCommand
b3GetStatusPhysicsSimulationParameters
//b3PhysicsParamSetInternalSimFlags is for internal/temporary/easter-egg/experimental demo purposes
//Use at own risk: magic things may or my not happen when calling this API
b3PhysicsParamSetInternalSimFlags
b3InitStepSimulationCommand
b3InitStepSimulationCommand2
b3InitResetSimulationCommand
b3InitResetSimulationCommand2
///Load a robot from a URDF file. Status type will CMD_URDF_LOADING_COMPLETED.
	///Access the robot from the unique body index, through b3GetStatusBodyIndex
b3LoadUrdfCommandInit
b3LoadUrdfCommandInit2
b3LoadUrdfCommandSetStartPosition
b3LoadUrdfCommandSetStartOrientation
b3LoadUrdfCommandSetUseMultiBody
b3LoadUrdfCommandSetUseFixedBase
b3LoadUrdfCommandSetFlags
b3LoadUrdfCommandSetGlobalScaling
b3SaveStateCommandInit
b3GetStatusGetStateId
b3LoadStateCommandInit
b3LoadStateSetStateId
b3LoadStateSetFileName
b3LoadBulletCommandInit
b3SaveBulletCommandInit
b3LoadMJCFCommandInit
b3LoadMJCFCommandInit2
b3LoadMJCFCommandSetFlags
///compute the forces to achieve an acceleration, given a state q and qdot using inverse dynamics
b3CalculateInverseDynamicsCommandInit
b3CalculateInverseDynamicsCommandInit2
b3GetStatusInverseDynamicsJointForces
b3CalculateJacobianCommandInit
b3GetStatusJacobian
b3CalculateMassMatrixCommandInit
///the mass matrix is stored in column-major layout of size dofCount*dofCount
b3GetStatusMassMatrix
///compute the joint positions to move the end effector to a desired target using inverse kinematics
b3CalculateInverseKinematicsCommandInit
b3CalculateInverseKinematicsAddTargetPurePosition
b3CalculateInverseKinematicsAddTargetPositionWithOrientation
b3CalculateInverseKinematicsPosWithNullSpaceVel
b3CalculateInverseKinematicsPosOrnWithNullSpaceVel
b3CalculateInverseKinematicsSetJointDamping
b3CalculateInverseKinematicsSelectSolver
b3GetStatusInverseKinematicsJointPositions
b3CalculateInverseKinematicsSetCurrentPositions
b3CalculateInverseKinematicsSetMaxNumIterations
b3CalculateInverseKinematicsSetResidualThreshold
b3CollisionFilterCommandInit
b3SetCollisionFilterPair
b3SetCollisionFilterGroupMask
b3LoadSdfCommandInit
b3LoadSdfCommandInit2
b3LoadSdfCommandSetUseMultiBody
b3LoadSdfCommandSetUseGlobalScaling
b3SaveWorldCommandInit
///The b3JointControlCommandInit method is obsolete, use b3JointControlCommandInit2 instead
b3JointControlCommandInit
///Set joint motor control variables such as desired position/angle, desired velocity,
	///applied joint forces, dependent on the control mode 
b3JointControlCommandInit2
b3JointControlCommandInit2Internal
///Only use when controlMode is CONTROL_MODE_POSITION_VELOCITY_PD
b3JointControlSetDesiredPosition
b3JointControlSetDesiredPositionMultiDof
b3JointControlSetKp
b3JointControlSetKd
b3JointControlSetMaximumVelocity
///Only use when controlMode is CONTROL_MODE_VELOCITY
b3JointControlSetDesiredVelocity
b3JointControlSetDesiredVelocityMultiDof
b3JointControlSetMaximumForce
///Only use if when controlMode is CONTROL_MODE_TORQUE,
b3JointControlSetDesiredForceTorque
///the creation of collision shapes and rigid bodies etc is likely going to change,
	///but good to have a b3CreateBoxShapeCommandInit for now
b3CreateCollisionShapeCommandInit
b3CreateCollisionShapeAddSphere
b3CreateCollisionShapeAddBox
b3CreateCollisionShapeAddCapsule
b3CreateCollisionShapeAddCylinder
b3CreateCollisionShapeAddPlane
b3CreateCollisionShapeAddMesh
b3CreateCollisionShapeAddConvexMesh
b3CreateCollisionShapeAddConcaveMesh
b3CreateCollisionSetFlag
b3CreateCollisionShapeSetChildTransform
b3GetStatusCollisionShapeUniqueId
b3InitRemoveCollisionShapeCommand
b3CreateVisualShapeCommandInit
b3CreateVisualShapeAddSphere
b3CreateVisualShapeAddBox
b3CreateVisualShapeAddCapsule
b3CreateVisualShapeAddCylinder
b3CreateVisualShapeAddPlane
b3CreateVisualShapeAddMesh
b3CreateVisualSetFlag
b3CreateVisualShapeSetChildTransform
b3CreateVisualShapeSetSpecularColor
b3CreateVisualShapeSetRGBAColor
b3GetStatusVisualShapeUniqueId
b3CreateMultiBodyCommandInit
b3CreateMultiBodyBase
b3CreateMultiBodyLink
/*3*/
/*4*/
//useMaximalCoordinates are disabled by default, enabling them is experimental and not fully supported yet
b3CreateMultiBodyUseMaximalCoordinates
b3CreateMultiBodySetFlags
//int b3CreateMultiBodyAddLink
///create a box of size 
	///after that, you can optionally adjust the initial position, orientation and size
b3CreateBoxShapeCommandInit
b3CreateBoxCommandSetStartPosition
b3CreateBoxCommandSetStartOrientation
b3CreateBoxCommandSetHalfExtents
b3CreateBoxCommandSetMass
b3CreateBoxCommandSetCollisionShapeType
b3CreateBoxCommandSetColorRGBA
///b3CreatePoseCommandInit will initialize 
	///base orientation and joint angles. This will set all velocities of base and joints to zero.
	///This is not a robot control command using actuators/joint motors, but manual repositioning the robot.
b3CreatePoseCommandInit
b3CreatePoseCommandInit2
b3CreatePoseCommandSetBasePosition
b3CreatePoseCommandSetBaseOrientation
b3CreatePoseCommandSetBaseLinearVelocity
b3CreatePoseCommandSetBaseAngularVelocity
b3CreatePoseCommandSetJointPositions
b3CreatePoseCommandSetJointPosition
b3CreatePoseCommandSetJointPositionMultiDof
b3CreatePoseCommandSetQ
b3CreatePoseCommandSetQdots
b3CreatePoseCommandSetJointVelocities
b3CreatePoseCommandSetJointVelocity
b3CreatePoseCommandSetJointVelocityMultiDof
///We are currently not reading the sensor information from the URDF file, and programmatically assign sensors.
	///This is rather inconsistent, to mix programmatical creation with loading from file.
b3CreateSensorCommandInit
b3CreateSensorEnable6DofJointForceTorqueSensor
///b3CreateSensorEnableIMUForLink is not implemented yet.
	///For now, if the IMU is located in the root link, use the root world transform to mimic an IMU.
b3CreateSensorEnableIMUForLink
b3RequestActualStateCommandInit
b3RequestActualStateCommandInit2
b3RequestActualStateCommandComputeLinkVelocity
b3RequestActualStateCommandComputeForwardKinematics
b3GetJointState
b3GetJointStateMultiDof
b3GetLinkState
b3PickBody
b3MovePickedBody
b3RemovePickingConstraint
b3CreateRaycastCommandInit
b3CreateRaycastBatchCommandInit
// Sets the number of threads to use to compute the ray intersections for the batch. Specify 0 to let Bullet decide, 1 
b3RaycastBatchSetNumThreads
//max num rays for b3RaycastBatchAddRay is MAX_RAY_INTERSECTION_BATCH_SIZE
b3RaycastBatchAddRay
//max num rays for b3RaycastBatchAddRays is MAX_RAY_INTERSECTION_BATCH_SIZE_STREAMING
b3RaycastBatchAddRays
b3RaycastBatchSetParentObject
b3GetRaycastInformation
/// Apply external force at the body 
b3ApplyExternalForceCommandInit
b3ApplyExternalForce /*3*/ /*3*/
b3ApplyExternalTorque
///experiments of robots interacting with non-rigid objects 
b3LoadSoftBodyCommandInit
b3LoadSoftBodySetScale
b3LoadSoftBodySetMass
b3LoadSoftBodySetCollisionMargin
b3RequestVREventsCommandInit
b3VREventsSetDeviceTypeFilter
b3GetVREventsData
b3SetVRCameraStateCommandInit
b3SetVRCameraRootPosition
b3SetVRCameraRootOrientation
b3SetVRCameraTrackingObject
b3SetVRCameraTrackingObjectFlag
b3RequestKeyboardEventsCommandInit
b3RequestKeyboardEventsCommandInit2
b3GetKeyboardEventsData
b3RequestMouseEventsCommandInit
b3GetMouseEventsData
b3StateLoggingCommandInit
b3StateLoggingStart
b3StateLoggingAddLoggingObjectUniqueId
b3StateLoggingSetMaxLogDof
b3StateLoggingSetLinkIndexA
b3StateLoggingSetLinkIndexB
b3StateLoggingSetBodyAUniqueId
b3StateLoggingSetBodyBUniqueId
b3StateLoggingSetDeviceTypeFilter
b3StateLoggingSetLogFlags
b3GetStatusLoggingUniqueId
b3StateLoggingStop
b3ProfileTimingCommandInit
b3SetProfileTimingDuractionInMicroSeconds
b3PushProfileTiming
b3PopProfileTiming
b3SetTimeOut
b3GetTimeOut
b3SetAdditionalSearchPath
b3MultiplyTransforms
b3InvertTransform
b3QuaternionSlerp
b3GetQuaternionFromAxisAngle
b3GetAxisAngleFromQuaternion
b3GetQuaternionDifference
b3CalculateVelocityQuaternion
b3RotateVector
///send physics commands using TCP networking
b3ConnectPhysicsTCP
///send physics commands using UDP networking
b3ConnectPhysicsUDP
///think more about naming. The b3ConnectPhysicsLoopback
b3CreateInProcessPhysicsServerAndConnect
b3CreateInProcessPhysicsServerAndConnectSharedMemory
b3CreateInProcessPhysicsServerAndConnectMainThread
b3CreateInProcessPhysicsServerAndConnectMainThreadSharedMemory
b3CreateInProcessPhysicsServerFromExistingExampleBrowserAndConnect
//create a shared memory physics server, with a DummyGUIHelper 
b3CreateInProcessPhysicsServerFromExistingExampleBrowserAndConnect2
b3CreateInProcessPhysicsServerFromExistingExampleBrowserAndConnect3
///ignore the following APIs, they are for internal use for example browser
b3InProcessRenderSceneInternal
b3InProcessDebugDrawInternal
b3InProcessMouseMoveCallback
b3InProcessMouseButtonCallback
